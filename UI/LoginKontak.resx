<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAGAPAABgDwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAfIwAgHyMHIB8jPCAf
        I1MgHyMhGgwDACAeIgAeICEAIB4iBSAfIgsgHyILIB8iCyAfIgsgHyILIB8iCyAfIgsgHyILIB8iCyAf
        IgsgHyILIB8iCyAfIgsgHyILIB8iCyAfIgsgHyILIB8iCyAfIgkgHyMBIB8jAAAAAAAgHiIAHx4iAyAf
        I3sgHyPxIB8j/SAfI9AgHyMyIB8jACAfIyMgHyOhIB8jxCAfI8MgHyPDIB8jwyAfI8MgHyPDIB8jwyAf
        I8MgHyPDIB8jwyAfI8MgHyPDIB8jwyAfI8MgHyPDIB8jwyAfI8MgHyPDIB8jvyAfI2YfHiIDIB8iACAf
        IwAgHyMjIB8j4CAfI/8gHyP/IB8j/yAfI5AgICMAIB8jhiAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j5CAf
        IyggHyMAIB8jACAfIyYgHyPlIB8j/yAfI/8gHyP/IB8jliAgIwAgHyONIB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyPpIB8jLSAfIwAgHyIAHx8iBSAfI44gHyP6IB8j/yAfI+AgHyM/IB8jACAfIy4gHyO5IB8j2iAf
        I9kgHyPZIB8j2SAfI9kgHyPZIB8j2SAfI9kgHyPZIB8j2SAfI9kgHyPZIB8j2SAfI9kgHyPZIB8j2SAf
        I9kgHyPZIB8j1SAfI3wgHyMGIB8jACIXKQAgHyMAIB8jDSAfI1IgHyNsIB8jMSAfIgEfHiIA////ACAf
        IwwgHyMYIB8jGCAfIxggHyMYIB8jGCAfIxggHyMYIB8jGCAfIxggHyMYIB8jGCAfIxggHyMYIB8jGCAf
        IxggHyMYIB8jGCAfIxggHyMVIB8jBCAfIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIB8jACAfIwggHyNBIB8jWCAf
        IyQgHCMAIB4jACAgIwAgHyMGIB8jDiAfIw4gHyMOIB8jDiAfIw4gHyMOIB8jDiAfIw4gHyMOIB8jDiAf
        Iw4gHyMOIB8jDiAfIw4gHyMOIB8jDiAfIw4gHyMOIB8jDB8eIgIfHyIAAAAAACAfIwAgHyMDIB8jgCAf
        I/QgHyP+IB8j1CAfIzUgHyMAIB8jJSAfI6cgHyPJIB8jyCAfI8ggHyPIIB8jyCAfI8ggHyPIIB8jyCAf
        I8ggHyPIIB8jyCAfI8ggHyPIIB8jyCAfI8ggHyPIIB8jyCAfI8ggHyPEIB8jbCAfIwQgHyMAIB8jACAf
        IyQgHyPiIB8j/yAfI/8gHyP/IB8jkSAfJAAgHyOIIB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyPmIB8jKiAf
        IwAgHyMAIB8jJSAfI+QgHyP/IB8j/yAfI/8gHyOUICAkACAfI4sgHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I+ggHyMsIB8jACAfIwAgHyMFIB8jiSAfI/ggHyP/IB8j3CAfIzwgHyMAIB8jKyAfI7MgHyPUIB8j0yAf
        I9MgHyPTIB8j0yAfI9MgHyPTIB8j0yAfI9MgHyPTIB8j0yAfI9MgHyPTIB8j0yAfI9MgHyPTIB8j0yAf
        I9MgHyPQIB8jdyAfIwUgHyMAAAAAACAfIwAgHyMMIB8jTSAfI2YgHyMtIB4jASAfIwAgIiQAIB8jCiAf
        IxQgHyMUIB8jFCAfIxQgHyMUIB8jFCAfIxQgHyMUIB8jFCAfIxQgHyMUIB8jFCAfIxQgHyMUIB8jFCAf
        IxQgHyMUIB8jFCAfIxEgHyMDIB8jAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgHyMAIB8jCiAfI0YgHyNeIB8jKCAe
        IgAfHiIAJCMnACAfIwggHyMRIB8jESAfIxEgHyMRIB8jESAfIxEgHyMRIB8jESAfIxEgHyMRIB8jESAf
        IxEgHyMRIB8jESAfIxEgHyMRIB8jESAfIxEgHyMOIB4jAiAeIwAAAAAAIB8iAB8fIgQgHyOEIB8j9iAf
        I/8gHyPYIB8jOCAfIwAgHyMoIB8jrSAfI9AgHyPPIB8jzyAfI88gHyPPIB8jzyAfI88gHyPPIB8jzyAf
        I88gHyPPIB8jzyAfI88gHyPPIB8jzyAfI88gHyPPIB8jzyAfI8sgHyNxIB8jBCAfIwAgHyMAIB8jJCAf
        I+MgHyP/IB8j/yAfI/8gHyOTIB8jACAfI4kgHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI+cgHyMrIB8jACAf
        IwAgHyMkIB8j4yAfI/8gHyP/IB8j/yAfI5MhICMAIB8jiiAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAf
        I/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j/yAfI/8gHyP/IB8j5yAf
        IysgHyMAIB4iACAeIgQgHyOFIB8j9iAfI/8gHyPZIB8jOSAfIwAgHyMpIB8jrSAfI88gHyPOIB8jziAf
        I84gHyPOIB8jziAfI84gHyPOIB8jziAfI84gHyPOIB8jziAfI84gHyPOIB8jziAfI84gHyPOIB8jziAf
        I8ogHyNxHx4iBCAfIgAAAAAAIB8jACAfIwogHyNHIB8jYSAfIykgHiEAIB8iABwfHgAgHiIIIB8iESAf
        IhEgHyIRIB8iESAfIhEgHyIRIB8iESAfIhEgHyIRIB8iESAfIhEgHyIRIB8iESAfIhEgHyIRIB8iESAf
        IhEgHyIRIB8iDh8eIwIfHiMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////////////////////////DgAADgQAAAYEAAAGBAAABgQAAAcGA
        AAP/////w4AAA4EAAAGBAAABgQAAAYEAAAHBgAAD/////8OAAAOBAAABgQAAAYEAAAGBAAABw4AAA///
        //////////////////////////////////8=
</value>
  </data>
</root>